function(x) apply(eegh1[, x:(x+pollnum-1)], 2, mean))),
nrow = length(onsets$concentrate), byrow=T)
concenh2     <- matrix(simplify(
lapply(onsets$concentrate,
function(x) apply(eegh2[, x:(x+pollnum-1)], 2, mean))),
nrow = length(onsets$concentrate), byrow=T)
# function for segmentation
segmentation <- function(onst, eegin){
matrix(simplify(
lapply(onst,
function(x) apply(eegin[, x:(x+pollnum-1)], 2, mean))),
nrow = length(onst), byrow=T)
}
concenh1(onsets$concentrate, eegm)
segmentatin(onsets$concentrate, eegm)
segmentation(onsets$concentrate, eegm)
concenh1     <- segmentation(onsets$concentrate, eegm)
concenh1
dim(concenh1)
concenh1     <- segmentation(onsets$concentrate, eegh1)
concenh1
concenh1     <- segmentation(onsets$concentrate, eegh1)
concenh2     <- segmentation(onsets$concentrate, eegh2)
relaxh1      <- segmentation(onsets$relax, eegh1)
relaxh2      <- segmentation(onsets$relax, eegh2)
mean(conch1)
mean(concenh1)
apply(concenh1, 1, mean)
dfmean <- NULL
dfmean = data.frame(conc1  = apply(concenh1, 1, mean),
conc2  = apply(concenh2, 1, mean),
relax1 = apply(relaxh1, 1, mean),
relax2 = apply(relaxh1, 1, mean))
dfmean
plot(dfmean$conc1/dfmean$conc2,
type = 'l',
col = 'red')
lines(dfmean$relax1/dfmean$relax2,
type = 'l',
col = 'blue')
dfmean = data.frame(conc1  = apply(concenh1, 1, mean),
conc2  = apply(concenh2, 1, mean),
relax1 = apply(relaxh1, 1, mean),
relax2 = apply(relaxh2, 1, mean))
plot(dfmean$conc1/dfmean$conc2,
type = 'l',
col = 'red')
lines(dfmean$relax1/dfmean$relax2,
type = 'l',
col = 'blue')
plot(dfmean$conc1/dfmean$conc2 - dfmean$relax1/dfmean$relax2,
type = 'l',
col = 'blue')
?runmed
plot(runmed(dfmean$conc1/dfmean$conc2 - dfmean$relax1/dfmean$relax2. 5),
plot(runmed(dfmean$conc1/dfmean$conc2 -
dfmean$relax1/dfmean$relax2, 5),
type = 'l',
col = 'blue')
targetmetric <- runmed(dfmean$conc1/dfmean$conc2 -
dfmean$relax1/dfmean$relax2, 5)
plot(targetmetric), type = 'l', col = 'blue')
plot(targetmetric, type = 'l', col = 'blue')
sum(targetmetric > 0) / length(targetmetric)
targetmetric <- runmed(dfmean$conc1/dfmean$conc2 -
dfmean$relax1/dfmean$relax2, 10)
plot(targetmetric, type = 'l', col = 'blue')
sum(targetmetric > 0) / length(targetmetric) # schlecht
targetmetric <- runmed(dfmean$conc1/dfmean$conc2 -
dfmean$relax1/dfmean$relax2, 9)
plot(targetmetric, type = 'l', col = 'blue')
sum(targetmetric > 0) / length(targetmetric) # schlecht
lf1 <- 4
hf1 <- 7
lf2 <- 13
hf2 <- 30
pollnum <- 256 # number of samples per poll
srate   <- 250
forder <- 5
secs    <- 30 # trial was 30 s long
pickChannels <- c("AF1", "AF2", "Cz")
# demean, filter, segment, average
chanIndex <- which(cnames$name %in% pickChannels)
eegm  <- demean(eeg[chanIndex,])
eegh1 <- hilbamp(bpfilt(eegm, srate, lf1, hf1, forder))
lf1 <- 4
hf1 <- 7
lf2 <- 13
hf2 <- 30
pollnum <- 256 # number of samples per poll
srate   <- 250
forder <- 4
secs    <- 30 # trial was 30 s long
pickChannels <- c("AF1", "AF2", "Cz")
# demean, filter, segment, average
chanIndex <- which(cnames$name %in% pickChannels)
eegm  <- demean(eeg[chanIndex,])
eegh1 <- hilbamp(bpfilt(eegm, srate, lf1, hf1, forder))
eegh2 <- hilbamp(bpfilt(eegm, srate, lf2, hf2, forder))
plot(eegh1)
dim(eegh1)
plot(eegh1[1,])
tindices a- [3:256-3]
tindices <- [3:256-3]
tindices <- c(3:256-3)
tindices
tindices <- c(3:(256-3)
)
tindices
length(tindices)
plot(eegh1[1,1:500])
plot(eegh1[1,1:1000])
plot(eegh2[1,1:1000])
plot(eegh1[1,1:1000])
eegh1
dim(eegh1)
tst=bpfilt(eegm, srate, lf1, hf1, forder)
dim(tst)
plot(tst[1,1:500])
plot(tst[1,1:1000])
dim(eegm)
cbind(rep(eegm[.,1], eegm, eegm[,1])
rep(eegm[,1],2)
rep(eegm[,1],2,1)
rep(eegm[,1],1,2)
rep(eegm[,1])
eegm[,1]
eegm
str(eegm)
eegm[1:3,1:2]
eegm[,1:2]
eegm[,1]
rep(eegm[,1], 2, 1)
rep(eegm[,1], 1, 2)
rep(eegm[,1], 1, 3)
rep(eegm[,1], 2, ,1,2)
rep(eegm[,1], 2, 2,1)
?rep
rep(eegm[,1], 2)
matrix(rep(eegm[,1], 2), 1, 2
)
rep(eegm[,1], each=3
)
rep(eegm[,1], length.out=5)
matrix(rep(eegm[,1], 3), 3, 3)
matrix(rep(eegm[,1], 3), 3)
matrix(rep(eegm[,1], 3), 3, byrow=F)
matrix(rep(eegm[,1], 3), 3, byrow=T)
eegm[,1]
matrix(rep(eegm[,1], dim(eegm)[1]), dim(eegm)[1], byrow=T)
matrix(rep(eegm[,1], 5, 5, byrow=T)
)
matrix(rep(eegm[,1], 10), dim(eegm)[1], byrow=T)
matrix(rep(eegm[,1], 10), dim(eegm)[1], byrow=F)
matrix(rep(eegm[,1], 10), dim(eegm)[1])
eegm
eegm[1,1:256]
eegm[2,1:256]
eegm[2,1000:1256]
chanIndex <- which(cnames$name %in% pickChannels)
eegm  <- demean(eeg[chanIndex,])
plot(eegm[1,])
concenh1     <- segmentation(onsets$concentrate, eegh1)
dim(concenh1)
segm2 <- function(onst, cindex, eegin){
matrix(simplify(
lapply(onst,
function(x) apply(eegin[cindex, x:(x+pollnum-1)], 2, mean))),
nrow = length(onst), byrow=T)
}
segm2 <- function(onst, cindex, eegin){
matrix(simplify(
lapply(onst,
function(x) apply(eegin[cindex, x:(x+pollnum-1)], 2, mean))),
nrow = length(onst), byrow=T)
}
segm2(onsets$relax,chanIndex, eegm)
segm2(onsets$relax,chanIndex, eeg)
tst=segm2(onsets$relax,chanIndex, eeg)
dim(tst)
segm2 <- function(onst, cindex, eegin){
lapply(onst,
function(x) eegin[cindex, x:(x+pollnum-1)])
}
tst=segm2(onsets$relax,chanIndex, eeg)
dim(tst)
tst
str(tst)
lapply(tst, demean)
seg  <- segmentation(onsets$relax, chanIndex, eeg)
seg  <- segmentation(onsets$relax, chanIndex, eeg)
segmentation <- function(onst, cindex, eegin){
lapply(onst,
function(x) eegin[cindex, x:(x+pollnum-1)])
}
seg  <- segmentation(onsets$relax, chanIndex, eeg)
eegm <- lapply(eeg, demean)
eegm <- lapply(seg, demean)
pwelch(eegm[[1]], srate)
eegm[[1]]
eegm[[1]][1,]
pwelch(eegm[[1]][1,], srate)
pwelch(eegm[[1]][1,], 1/+srate)
pwelch(eegm[[1]][1,], srate)
]k]=pwelch(eegm[[1]][1,], 1/srate)
k=pwelch(eegm[[1]][1,], 1/srate)
k=pwelch(eegm[[1]][1,], srate)
k=pwelch(eegm[[1]][1,], FS = srate)
k=pwelch(eegm[[1]][1,], Fs = srate)
k=pwelch(eegm[[1]][1,], fs = srate)
pwelch(eegm[[1]][1,], fs = srate)
pwelch(eegm[[1]], window = hanning(256),fs = srate)
hanning(256)
eegm[[1]]
pwelch(eegm[[1]][1], window = hanning(256), fs = srate)
pwelch(eegm[[1]][1], fs = srate)
pwelch(eegm[[1]][1,], fs = srate)
pwelch(eegm[[1]][1,], window = hanning(256), fs = srate)
apply(eegm[[1]], 1, psdwelch(window = hanning(256), fs = srate))
apply(eegm[[1]], 1, pwelch(window = hanning(256), fs = srate))
apply(eegm[[1]], 1, function(x) pwelch(x, window = hanning(256), fs = srate))
l=pwelch(eegm[[1]][1,], window = hanning(256), fs = srate)
str(l)
apply(eegm[[1]], 2, function(x) pwelch(x, window = hanning(256), fs = srate))
apply(eegm[[1]], 1, function(x) pwelch(x, window = hanning(256), fs = srate))
eegm[[1]]
ttt=apply(eegm[[1]], 1, function(x) pwelch(x, window = hanning(256), fs = srate))
ttt[[1]]
ttt[[2]]
ttt[[3]]
ttt[[3]]$freq
ttt[[4]]
ttt[[1]]
ttt[[2]]
ttt[[3]]
ttt[[1]]
ttt[[1]]$freq
ttt[[1]]$spec
welchpsd <- function(eegin, lf1, hf1, srate){
apply(eegin, 1, function(x) pwelch(x, window = hanning(dim(eegin)[2]), fs = srate))
}
welchpsd(eegm[[1]], lf1 = 2, hf1 = 10, srate = 250)
l=welchpsd(eegm[[1]], lf1 = 2, hf1 = 10, srate = 250)
l = welchpsd(eegm[[1]], lf1 = 2, hf1 = 10, srate = 250)
l[[1]]
l[[2]]
l[[2]]$freq
group_split(l) %>% map('freqency')
map(l,'freqency')
l[[1]]
l[[1]]$freq
map(l,'freq')
map_df(l,'freq')
l[[1]]$spec
out <- map_df(l, 'spec')
out
l %>% mutate(mspec = mean(X2, X3, X5))
out %>% mutate(mspec = mean(X2, X3, X5))
out %>% mutate(mspec = mean(X2:X5))
out %>% mutate(mspec = mean())
map(tmp, 'spec')
map(l, 'spec')
simplify(map(l, 'spec'))
map(l, 'spec')
simplify2array(map(l, 'spec'))
arr <- simplify2array(map(tmp, 'spec'))
tmp=l
arr <- simplify2array(map(tmp, 'spec'))
ff <- apply(arr, 2, mean)
ff
ff <- apply(arr, 1, mean)
ff
pwr <- apply(arr, 1, mean)
pow2db
pow2db(pwr)
welchpsd <- function(eegin, lf1, hf1, srate){
tmp <- apply(eegin, 1, function(x) pwelch(x, window = hanning(dim(eegin)[2]), fs = srate))
arr <- simplify2array(map(tmp, 'spec'))
pwr <- apply(arr, 1, mean)
}
seg  <- segmentation(onsets$relax, chanIndex, eeg)
eegm <- lapply(seg, demean)
l = welchpsd(eegm[[1]], lf1 = 2, hf1 = 10, srate = 250)
l
lapply(eegm, function(x) welchpsd(x, srate = 250))
welchpsd <- function(eegin, srate){
tmp <- apply(eegin, 1, function(x) pwelch(x, window = hanning(dim(eegin)[2]), fs = srate))
arr <- simplify2array(map(tmp, 'spec'))
pwr <- apply(arr, 1, mean)
}
seg  <- segmentation(onsets$relax, chanIndex, eeg)
eegm <- lapply(seg, demean)
lapply(eegm, function(x) welchpsd(x, srate = 250))
eegf <- lapply(eegm, function(x) welchpsd(x, srate = 250))
eegf
simlify2array(eegf)
simplify2array(eegf)
eegfa <- simplify2array(eegf)
dim(eegfa
)
powerEstimate <- simplify2array(eegf)
freqScale <- pwelch(eegm[[1]],
window = hanning(dim(eegm)[2]),
fs = srate)$freq
dim(eegm)[2]
freqScale <- pwelch(eegm[[1]],
window = hanning(dim(eegm[[1]])[2]),
fs = srate)$freq
eegm[[1]]
eegm[[1]][1,]
freqScale <- pwelch(eegm[[1]][1,],
window = hanning(dim(eegm[[1]])[2]),
fs = srate)$freq
freqScale
?near
freqScale > lf1
freqScale > lf1 & freqScale < hf1
which(freqScale > lf1 & freqScale < hf1)
freq1indices <- which(freqScale > lf1 & freqScale < hf1)
freq2indices <- which(freqScale > lf2 & freqScale < hf2)
freqScale[freq1indices]
powerEstimate
apply(powerEstimate, 1, mean)
plot(freqScale, apply(powerEstimate, 1, mean))
plot(freqScale, apply(powerEstimate, 1, mean), type='l')
near(freqScale, 4)
near(freqScale > 4)
(freqScale > 4)
which(freqScale > 4)
min(which(freqScale > 4))
min(which(freqScale > 4))-1
dim(powerEstimate)
mean(powerEstimate[freq1indices,])
)
apply(powerEstimate[freq1indices,], 1, mean)
apply(powerEstimate[freq1indices,], 2, mean)
plot(freqScale, f1pow, type='l', col = 'blue')
f1pow <- apply(powerEstimate[freq1indices,], 2, mean)
f2pow <- apply(powerEstimate[freq2indices,], 2, mean)
plot(freqScale, f1pow, type='l', col = 'blue')
f1pow
plot(f1pow, type='l', col = 'blue')
plot(f1pow / f2pow, type='l', col = 'blue')
seg  <- segmentation(onsets$relax, chanIndex, eeg)
eegm <- lapply(seg, demean)
eegf <- lapply(eegm, function(x) welchpsd(x, srate = 250))
powerEstimateRelax <- simplify2array(eegf)
seg  <- segmentation(onsets$concentrate, chanIndex, eeg)
eegm <- lapply(seg, demean)
eegf <- lapply(eegm, function(x) welchpsd(x, srate = 250))
powerEstimateConcentrate <- simplify2array(eegf)
freqScale <- pwelch(eegm[[1]][1,],
window = hanning(dim(eegm[[1]])[2]),
fs = srate)$freq
freq1indices <- which(freqScale > lf1 & freqScale < hf1)
freq2indices <- which(freqScale > lf2 & freqScale < hf2)
plot(freqScale, apply(powerEstimateRelax, 1, mean), type='l')
line(freqScale, apply(powerEstimateConcentrate, 1, mean), type='l')
line(freqScale, apply(powerEstimateConcentrate, 1, mean), type='l')
apply(powerEstimateConcentrate, 1, mean)
line(freqScale, apply(powerEstimateConcentrate, 1, mean), type='l')
lines(freqScale, apply(powerEstimateConcentrate, 1, mean), type='l')
plot(freqScale, apply(powerEstimateRelax, 1, mean),
type='l', col = 'blue')
lines(freqScale, apply(powerEstimateConcentrate, 1, mean),
type='l', col = 'red')
f1pow <- apply(powerEstimateRelax[freq1indices,], 2, mean)
f2pow <- apply(powerEstimateRelax[freq2indices,], 2, mean)
plot(f1pow / f2pow, type='l', col = 'blue')
welchpsd(rnorm(1,pollnum), srate = 250)
welchpsd(rnorm(pollnum), srate = 250)
rnorm(pollnum)
welchpsd(rnorm(pollnum),window = hanning(pollnum) srate = 250)
welchpsd(rnorm(pollnum),window = hanning(pollnum), srate = 250)$freq
welchpsd
pwelch(rnorm(pollnum),window = hanning(pollnum), srate = 250)$freq
pwelch(rnorm(pollnum),window = hanning(pollnum), fs = 250)$freq
freqScale <- pwelch(rnorm(pollnum),
window = hanning(pollnum),
fs = 250)$freq
testdat = runif(20)
testdat+
testdat
heat.colors(10)
visualFeedback <- function(colr){
plot(c(100, 200), c(100, 200),
type= "n", xlab = "", ylab = "", axes = FALSE)
rect(120, 140, 180, 160, border = colr, col = colr)
rect(140, 120, 160, 180, border = colr, col = colr)}
runif
testdat
round(testdat*100)
x11()
testdat = round(runif(20)*100) # 20 random integers from 0 - 100
hcol <- heat.colors(100) # from light yellow to red
visualFeedback <- function(colr){
plot(c(100, 200), c(100, 200),
type= "n", xlab = "", ylab = "", axes = FALSE)
rect(120, 140, 180, 160, border = colr, col = colr)
rect(140, 120, 160, 180, border = colr, col = colr)}
for (j in testdat){
Sys.sleep(0.3)
visualFeedback(hcol(j))
}
hcol <- heat.colors(100) # from light yellow to red
hcol <- heat.colors(100) # from light yellow to red
visualFeedback <- function(colr){
plot(c(100, 200), c(100, 200),
type= "n", xlab = "", ylab = "", axes = FALSE)
rect(120, 140, 180, 160, border = colr, col = colr)
rect(140, 120, 160, 180, border = colr, col = colr)}
for (j in testdat){
Sys.sleep(0.3)
visualFeedback(hcol[j])
}
for (j in testdat){
Sys.sleep(1)
print(visualFeedback(hcol[j]))
}
k=plot(c(100, 200), c(100, 200),
type= "n", xlab = "", ylab = "", axes = FALSE)
rect(120, 140, 180, 160, border = colr, col = colr)
barplot(testdat, ylim = c(0,100),col = colr)
barplot(testdat, ylim = c(0,100),col = hcol[1]))
barplot(testdat, ylim = c(0,100),col = hcol[1])
barplot(testdat[1], ylim = c(0,100),col = hcol[1])
barplot(testdat[2], ylim = c(0,100),col = hcol[2])
barplot(testdat[3], ylim = c(0,100),col = hcol[3])
?barplpot
?barplot
barplot(testdat, width = 0.2,
ylim = c(0,100),
col = colr)
barplot(testdat, width = 0.2,
ylim = c(0,100),
col = hcol[20])
j=20
barplot(testdat[j], width = 0.2,
ylim = c(0,100),
col = hcol[j])
barplot(testdat[j], width = 0.1,
ylim = c(0,100),
col = hcol[j])
barplot(testdat[j], space = 0.2,
ylim = c(0,100),
col = hcol[j])
barplot(testdat[j], space = 0.2,
xlim = c(0,3),
ylim = c(0,100),
col = hcol[j])
barplot(testdat[j], space = 0.2,
xlim = c(-2,3),
ylim = c(0,100),
col = hcol[j])
barplot(testdat[j], space = 0.2,
xlim = c(-1,2),
ylim = c(0,100),
col = hcol[j])
barplot(testdat[j], space = 0.2,
xlim = c(-0.5,2),
ylim = c(0,100),
col = hcol[j])
for (j in testdat){
Sys.sleep(1)
plt <- barplot(testdat[j], space = 0.2,
xlim = c(-0.5,2),
ylim = c(0,100),
col = hcol[j])
print(plt)
}
for (j in testdat){
Sys.sleep(1)
barplot(testdat[j], space = 0.2,
xlim = c(-0.5,2),
ylim = c(0,100),
col = hcol[j])
#print(plt)
}
hcol
for (j in 1:length(testdat)){
Sys.sleep(1)
barplot(testdat[j], space = 0.2,
xlim = c(-0.5,2),
ylim = c(0,100),
col = hcol[j])
#print(plt)
}
?heat.colors
barplot(1:5, col=heat.colors(5))
heat.colors(5)
testdat
testdat = round(runif(20)*100) # 20 random integers from 0 - 100
hcol <- heat.colors(100) # from light yellow to red
for (j in 1:length(testdat)){
Sys.sleep(1)
barplot(testdat[j], space = 0.2,
xlim = c(-0.5,2),
ylim = c(0,100),
col = hcol[j])
#print(plt)
}
hcol
hcol[40]
barplot(2, col = hcol[40])
for (j in 1:length(testdat)){
Sys.sleep(1)
barplot(testdat[j], space = 0.2,
xlim = c(-0.5,2),
ylim = c(0,100),
col = hcol[testdat[j]])
#print(plt)
}
