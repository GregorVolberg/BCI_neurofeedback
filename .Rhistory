Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[c(boardinfo$eegchannels, boardinfo$markerchannel)]
dim(poll)
poll
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll
dim(poll)poll
dim(poll)
?slice
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum)) %>%
slice(c(boardinfo$eegchannels, boardinfo$markerchannel))
poll <- myboard$get_board_data(
as.integer(boardinfo$pollnum))[
c(boardinfo$eegchannels, boardinfo$markerchannel),]
dim(position_fill())
dim(poll)
?select
pollf <- lpfilt(poll, boardinfo, 40, 6)
poll
dim(poll)
?apply
apply(poll, 1, function(x) x - mean(x))
demean <- function(poll, boardinfo){
poll[boardinfo$eegchannels,] <- apply(poll[boardinfo$eegchannels,], 1, function(x) x - mean(x))
}
p1 <-demean(poll)
p1 <-demean(poll, boardinfo)
dim(p1)
polleeg <- poll[boardinfo$eegchannels, ]
apply(polleeg, 1, function(x) x - mean(x))
polleeg <- poll[boardinfo$eegchannels, ]
po<-apply(polleeg, 1, function(x) x - mean(x))
dim(po)
dim(poll)
po<-apply(polleeg, 2, function(x) x - mean(x))
dim(po)
polleeg <- poll[boardinfo$eegchannels, ] %>%
apply(., 2, function(x) x - mean(x))
dim(polleeg)
coef <- butter(forder, lf / (boardinfo$samplerate/2), 'low') # requires 'signal' package
lf=40
forder = 6
coef <- butter(forder, lf / (boardinfo$samplerate/2), 'low') # requires 'signal' package
polleeg <- poll[boardinfo$eegchannels, ] %>%
apply(., 2, function(x) x - mean(x)) %>%
filter(coef, .)
polleeg
demean <- function(poll, boardinfo){
eegchann <- apply(poll[boardinfo$eegchannels,], 2, function(x) x - mean(x))
poll <- rbind(eegchan, poll[boardinfo$markerchannel])
}
poll
dim(poll)
demean(pollpo=)
po=demean(poll)
po=demean(poll, boardinfo)
demean <- function(poll, boardinfo){
eegchan <- apply(poll[boardinfo$eegchannels,], 2, function(x) x - mean(x))
poll <- rbind(eegchan, poll[boardinfo$markerchannel])
}
po=demean(poll, boardinfo)
dim(po)
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll1 <- demean(poll, boardinfo)
poll2 <- lpfilt(poll1, boardinfo)
plot(poll[1,])
plot(poll1[1,])
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
dim(poll1)
poll1
poll
demean <- function(poll, boardinfo){
eegchan <- apply(poll[boardinfo$eegchannels,], 1, function(x) x - mean(x))
poll <- rbind(eegchan, poll[boardinfo$markerchannel])
}
poll1 <- demean(poll, boardinfo)
dim(poll1)
dim(poll)
?tapply
?apply
poll
apply(poll, 1, function(x) x - mean(x))
t(apply(poll, 1, function(x) x - mean(x)))
pp=t(apply(poll, 1, function(x) x - mean(x)))
plot(poll[1,])
plot(poll[2,])
plot(poll[2,], type='l')
plot(po[2,], type='l')
plot(poll[2,], type='l')
plot(pp[2,], type='l')
demean <- function(poll, boardinfo){
eegchan <- t(apply(poll[boardinfo$eegchannels,], 1, function(x) x - mean(x)))
poll <- rbind(eegchan, poll[boardinfo$markerchannel])
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll1 <- demean(poll, boardinfo)
dim(poll)
dim(poll1)
poll2 <- lpfilt(poll1, boardinfo)
dim(poll2)
poll1
coef <- butter(forder, lf / (boardinfo$samplerate/2), 'low')
filter(coef, poll1)
dim(filter(coef, poll1))
apply(poll1, 1, function(x) filter(coef, x))
t(apply(poll1, 1, function(x) filter(coef, x)))
lpfilt <- function(poll, boardinfo, lf = 40, forder = 6){
coef <- butter(forder, lf / (boardinfo$samplerate/2), 'low')
eegchan <- t(apply(poll[boardinfo$eegchannels,], 1, function(x) filter(coef, x)))
pollback <- rbind(eegchan, poll[boardinfo$markerchannel])
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll1 <- demean(poll, boardinfo)
poll2 <- lpfilt(poll1, boardinfo)
plot(poll1[2,], type='l')
plot(poll1[1,], type='l')
plot(poll1[3,], type='l')
hold on; plot(poll2[3,], type='l', col= 'red')
hold on ; plot(poll2[3,], type='l', col= 'red')
hold on
plot(poll2[3,], type='l', col= 'red', add=T)
plot(poll1[3,], type='l')
plot(poll2[3,], type='l', col= 'red', add=T)
plot(poll2[3,], type='l', col= 'red', add=T)
poll2
poll2[1,]
plot(poll2[1,])
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll1[1,], type='l')
plot(poll2[1,], type='l')
plot(poll2[2,], type='l')
plot(poll1[1,], type='l')
plot(poll2[2,], type='l')
plot(poll1[1,], type='l')
plot(poll2[2,], type='l')
plot(poll1[1,], type='l')
plot(poll2[2,], type='l')
plot(poll1[1,], type='l')
plot(poll2[2,], type='l')
plot(poll1[1,], type='l')
plot(poll2[2,], type='l')
plot(poll1[1,], type='l')
plot(poll2[2,], type='l')
eeg <- data.frame(t(poll))
head(eeg)
eeg <- data.frame(poll) %>%
setNames(boardinfo$channames)
eeg
eeg <- data.frame(poll)
eeg
eeg <- data.frame(t(poll))
eeg
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll <- demean(poll, boardinfo)
poll <- lpfilt(poll, boardinfo)
eeg <- data.frame(t(poll)) %>%
setNames(boardinfo$channames)
eeg
head(eeg)
myboard$get_board_descr
l=myboard$get_board_descr
myboard$get_eeg_channels
eegchan=myboard$get_eeg_channels
eegchan
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
l=myboard             <- brainflow_python$BoardShim(Id, params)
l
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll
dim(poll)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[2:end,]
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,]
dim(poll)
source('./helperFunctions.r')
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,] # remove non-data channel
poll <- demean(poll, boardinfo)
poll <- lpfilt(poll, boardinfo)
poll
dim(poll)
eeg <- data.frame(t(poll)) %>%
setNames(boardinfo$channames)
eeg
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo() # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling start
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10 #
begsample <- NULL
endsample <- NULL
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,] # remove non-data channel
poll
poll <- demean(poll, boardinfo)
boardinfo$eegchannels
poll
dim(poll)
poll <- lpfilt(poll, boardinfo)
poll
eeg <- data.frame(t(poll))
head(eeg)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
dim(poll)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,] # remove no
dim(poll)
poll <- demean(poll, boardinfo)
poll <- lpfilt(poll, boardinfo)
eeg <- data.frame(t(poll))
eeghead())
head(eeg)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,] # remove non-data channel
poll[1,]
plot(poll[1,])
plot(poll[1,], type='l')
plot(poll[8,], type='l')
plot(poll[9,], type='l')
plot(poll[23,], type='l')
poll <- demean(poll, boardinfo)
boardinfo$eegchannels
boardinfo$markerchannel
poll1 <- demean(poll, boardinfo)
poll1
plot(poll1[23,], type='l')
dim(poll1)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
demean <- function(eeg){
eegchan <- t(apply(poll[1:8,], 1, function(x) x - mean(x)))
pollback <- rbind(eegchan, eeg[9,])
}
source('./helperFunctions.r')
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- demean(poll[c(boardinfo$eegchannels, boardinfo$markerchannel),])
dim(eeg)
eeg
source('./helperFunctions.r')
eeg  <- demean(poll[c(boardinfo$eegchannels, boardinfo$markerchannel),])
poll <- lpfilt(poll, boardinfo)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- demean(poll[c(boardinfo$eegchannels, boardinfo$markerchannel),])
eeg <- lpfilt(eeg, boardinfo)
dim(eeg)
eeg <- data.frame(t(poll)) %>%
setNames(boardinfo$channames)
head(eeg)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,]
eeg  <- demean(poll)
eeg
t(eeg)
demean <- function(poll){
eegchan <- t(apply(poll[1:8,], 1, function(x) x - mean(x)))
pollback <- rbind(eegchan, poll[9,])
}
eeg  <- demean(poll)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,]
eeg  <- demean(poll)
t(eeg)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))[-1,]
t(poll)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(poll)
eeg
t(eeg)
eeg  <- demean(eeg)
eeg
t(eeg)
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg
t(eeg)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
dim(poll)
plot(poll[1,])
c(boardinfo$eegchannels, boardinfo$markerchannel)
poll[23,]
poll[22,]
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
poll[22,]
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
t(eeg)
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
t(poll)
dim(poll)
c(boardinfo$eegchannels, boardinfo$markerchannel)
poll[24,]
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
t(poll)
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
t(eeg)
source('./helperFunctions.r')
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
t(eeg)
c(boardinfo$eegchannels, boardinfo$markerchannel)
boardinfo <- setBoardInfo() # see helper functions
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
t(eeg)
eeg <- lpfilt(eeg, boardinfo)
t(eeg)
eeg <- data.frame(t(poll)) %>%
setNames(boardinfo$channames)
head(eeg)
pp=eeg
data.frame(t(pp))
data.frame(pp)
eeg
pp
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg
data.framet(eeg)
data.frame(t(eeg))
source('./helperFunctions.r')
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo() # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling start
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10 #
begsample <- NULL
endsample <- NULL
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
plotEEG(poll, boardinfo, polls)
previousSample <- endsample[polls]
}
eeg
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
eeg
poll=eeg
eeg <- data.frame(t(poll)) %>%
setNames(boardinfo$channames) %>%
ts(., frequency = boardinfo$samplerate, start = 0)
eeg
plot(eeg, col = plotcols[isArtifact + 1],
main = paste0('EEG, polling interval ', polls))
plot(eeg)
source('./helperFunctions.r')
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo() # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling start
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10 #
begsample <- NULL
endsample <- NULL
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
plotEEG(poll, boardinfo, polls)
previousSample <- endsample[polls]
}
source('./helperFunctions.r')
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo() # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling start
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10 #
begsample <- NULL
endsample <- NULL
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
plotEEG(eeg, boardinfo, polls)
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
source('./helperFunctions.r')
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo() # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling start
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10 #
begsample <- NULL
endsample <- NULL
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
plotEEG(eeg, boardinfo, polls)
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
