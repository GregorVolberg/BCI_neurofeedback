nSamp = as.integer(250)
v=myboard$get_current_board_data(nSamp)
myboard$get_eeg_channels(Id)
myboard$get_device_name(Id)
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
dim(str)
dim(v)
head(v)
dim(v)
v(1:32,1_10)
v(1:32,1:10)
v[1:32,1:10]
v[1,1:10]
v[1,1:50]
v[1,1:70]
v[1,1:71]
v[31,1:71]
v[32,1:71]
v[30,1:71]
info$timestamp_channel
v[31,1:71]
v[32,1:71]
info$temperature_channels
info$num_rows
info$marker_channel
info$resistance_channels
brainflow_python$BoardShim$release_all_sessions();
Id      <- brainflow_python$BoardIds$SYNTHETIC_BOARD
# board Id
params  <- brainflow_python$BrainFlowInputParams()
# board parameters
myboard <- brainflow_python$BoardShim(Id, params)
# set up board
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
myboard$get_board_data_count(preset)
for (j in 1:10){}
Sys.sleep(1)
myboard$get_board_data_count(preset)}
for (j in 1:10){
Sys.sleep(1)
myboard$get_board_data_count(preset)}
for (j in 1:10){
Sys.sleep(1)
print(myboard$get_board_data_count(preset))}
myboard$get_board_data_count
myboard$get_board_data_count()
myboard$get_board_data_count()
v=myboard$get_board_data(nSamp)
m=myboard$get_board_data(nSamp)
m
dim(m)
dim(v)
v[31,]
m[31,]
v1=[31,1]
v1=v[31,1]
m1=m[31,1]
v1
m1
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
myboard$release_session() # end session
Id      <- brainflow_python$BoardIds$SYNTHETIC_BOARD
# board Id
params  <- brainflow_python$BrainFlowInputParams()
# board parameters
myboard <- brainflow_python$BoardShim(Id, params)
# set up board
myboard$add_streamer('file://myfile.csv:w', preset);
myboard$prepare_session() # start session
myboard$add_streamer('file://myfile.csv:w', preset);
myboard$start_stream()    # start stream
#...
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
Id      <- brainflow_python$BoardIds$SYNTHETIC_BOARD
# board Id
params  <- brainflow_python$BrainFlowInputParams()
# board parameters
myboard <- brainflow_python$BoardShim(Id, params)
# set up board
myboard$prepare_session() # start session
myboard$add_streamer('file://myfile.csv:w')
myboard$start_stream()    # start stream
#...
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
library(readr)
myfile <- read_csv("myfile.csv")
View(myfile)
str(myfile)
dim(myfile)
dims(myfile)
library(readxl)
eeg <- read.csv('myfile.csv')
dims(eeg)
dim(eeg)
read_delim('myfile.csv', delim = '\t')
eeg <- read_delim('myfile.csv', delim = '\t')
dim(eeg)
eeg[:,1]
eeg[,1]
eeg[31,1]
eeg[,31]
plot(eeg[,31])
plot(eeg[,31],eeg[,31])
eeg[1,31]
eeg[2,31]
eeg[5,31]
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params.file = "myfile.csv"
params.master_board = brainflow_python$BoardIds.SYNTHETIC_BOARD
params.master_board = brainflow_python$BoardIds.SYNTHETIC_BOARD
params.master_board = brainflow_python$BoardIds$SYNTHETIC_BOARD
myboard <- brainflow_python$BoardShim(Id, params)
params  <- brainflow_python$BrainFlowInputParams()
params.file = "myfile.csv"
params.master_board = brainflow_python$BoardIds$SYNTHETIC_BOARD
myboard <- brainflow_python$BoardShim(Id, params)
brainflow_python$BoardIds$SYNTHETIC_BOARD
params
params()
params  <- brainflow_python$BrainFlowInputParams()
params.file = "myfile.csv"
params
Id      <- brainflow_python$BoardIds$SYNTHETIC_BOARD
# board Id
params  <- brainflow_python$BrainFlowInputParams()
params
params$master_board
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params.file = "myfile.csv"
params.master_board = brainflow_python$BoardIds$SYNTHETIC_BOARD
params.master_board
params.file
myboard <- brainflow_python$BoardShim(Id, params)
params.file <- "myfile.csv"
params.master_board <- brainflow_python$BoardIds$SYNTHETIC_BOARD
myboard <- brainflow_python$BoardShim(Id, params)
myboard <- brainflow_python$BoardShim(Id, as.integer(-1))
params.master_board <- as.integer(-1)
myboard <- brainflow_python$BoardShim(Id, params)
getwd()
params.file <- "C:/Users/LocalAdmin/Documents/Git/BCI_neurofeedback/myfile.csv"
params.master_board <- as.integer(-1)brainflow_python$BoardIds$SYNTHETIC_BOARD
params.master_board <- brainflow_python$BoardIds$SYNTHETIC_BOARD
myboard <- brainflow_python$BoardShim(Id, params)
str(params)
params.master_board
params.file
params.master_board
colrows <- rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'))
nrow(colrows))
nrow(colrows)
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows(j,),
fill  = colrows(j,),
size  = 10)
}
library(tidyverse)
library(ggplot2)
tapping <- tibble(x = c(0, 1, 2, 3, 4), y = rep(0, 5))
screen <- ggplot(tapping, aes(x, y)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
colrows <- rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'))
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows(j,),
fill  = colrows(j,),
size  = 10)
}
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 10)
Sys.sleep(presd[j])
}
# stimuli and timing
xpos  <- c(0, 0, 0, 1)
presd <- c(3, 3, 1, 1) # presentation duration, in seconds
ypos  <- rep(0, length(ypos))
xpos  <- c(0, 0, 0, 1)
presd <- c(3, 3, 1, 1) # presentation duration, in seconds
ypos  <- rep(0, length(xpos))
pchar <- 16 # plotting character, filled circle (19)
colrs <-   rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'))
# plot layout
screen <- ggplot(data.frame(ypos, ypos), aes(x, y)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 10)
Sys.sleep(presd[j])
}
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 10)
j
j=1
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
screen <- ggplot(data.frame(xpos, ypos), aes(x, y)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
screen + geom_point(color = c('yellow', 'white', 'white', 'white', 'white'))
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
xpos  <- c(0, 1, 2, 3, 4)
ypos  <- rep(0, length(xpos))
presd <- c(3, 3, 1, 1) # presentation duration per row, in seconds
pchar <- 16 # plotting character, filled circle (19)
colrs <-   rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'))
# plot layout
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
screen + geom_point(#color = colrows[j,],
fill  = colrows[j,],
size  = 20)
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=1
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=2
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=3
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=1
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
x11()
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
#Sys.sleep(presd[j])
}
x11()
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20))
#Sys.sleep(presd[j])
}
x11()
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20))
Sys.sleep(presd[j])
}
?x11
x11(width=300, height = 100)
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
size  = 10))
Sys.sleep(presd[j])
}
rep(1,5)
library(ggplot2)
# stimuli and timing
xpos  <- c(0, 1, 2, 3, 4)
ypos  <- rep(0, length(xpos))
presd <- c(2, 2, rep(1, 5)) # presentation duration per row, in seconds
pchar <- 16 # plotting character, filled circle (19)
colrs <-   rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'),
c('white',  'white', 'red',   'white', 'white'),
c('white',  'white', 'white', 'red',   'white'),
c('white',  'white', 'white', 'white', 'red'))
# plot layout
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
x11(width=200, height = 100)
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
x11(width=200, height = 100)
for (j in 1:nrow(colrs)){
print(screen + geom_point(color = colrows[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
colrs <-   rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'),
c('white',  'white', 'red',   'white', 'white'),
c('white',  'white', 'white', 'red',   'white'),
c('white',  'white', 'white', 'white', 'red'))
# plot layout
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
x11(width=200, height = 100)
for (j in 1:nrow(colrs)){
print(screen + geom_point(color = colrows[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
x11(width=200, height = 100)
for (j in 1:nrow(colrs)){
print(screen + geom_point(color = colrs[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
ls()
45*15
4.5*5*125
library(grid)
library(gridExtra)
library(tidyverse)
# Pfeil definieren
pfeil <- function(direction) {
grid.newpage()
if (direction == "right") {
grid.lines(x = c(0.35, 0.55), y = c(0.5, 0.5), arrow = arrow(type = "closed", ends = "last"))
} else {
grid.lines(x = c(0.55, 0.35), y = c(0.5, 0.5), arrow = arrow(type = "closed", ends = "last"))
}
}
# Grüner Punkt als Signal für Handlung
punkt <- function() {
grid.newpage()
grid.circle(x = 0.5, y = 0.5, r = 0.1, gp = gpar(fill = "green"))
}
# Pause definieren
pause <- function() {
grid.newpage()
}
# Ende definieren
ende <- function() {
grid.newpage()
grid.text("ENDE", x = 0.5, y = 0.5, gp = gpar(fontsize = 20, col = "blue"))
}
# Ablauf eines Trials
trial <- function() {
# Pause (7 Sekunden, mit 2 Sekunden jitter)
pause_duration <- jitter(7, 1, 2)
pause()
Sys.sleep(pause_duration)
# zufällige Pfeilrichtung
arrow_direction <- sample(c("left", "right"), 1)
# Pfeil anzeigen (5 Sekunden)
pfeil(arrow_direction)
Sys.sleep(5)
# Punkt anzeigen (5 Sekunden)
punkt()
Sys.sleep(5)
}
# Trials für eine Session wiederholen lassen
session <- function(times) {
for (i in 1:times) {
trial()
}
ende()
}
# session starten
session(2)
session(2)
pause()
x11()
session(2)
x11?
?x11
x11(width=400, height=200)
x11(width=200, height=80)
x11(width=100, height=80)
x11(width=50, height=80)
x11(width=800, height=40)
x11(width=80, height=40)
x11(width=60, height=40)
x11(width=40, height=20)
x11(width=8, height=6)
x11(width=8, height=6) #new
session(2)
print(x11(width=8, height=6)) #new
session(2)
dev.set(x11())
pltwindow <-x11(width=8, height=6) #new
dev.set(pltwindow)
pltwindow
pltwindow <-x11(width=8, height=6) #new
dev.set(pltwindow)
dev.new()
session(2)
dev.new()
session(2)
?dev.new()
windows()
session(2)
direction <- sample(c(1,2), 1)
c("left", "right")[direction]
4.5 * 5 * 125
myLotto <- c(41, 35, 16, 39,  2, 47)
win  <- 0
week <- 0
while (win < 1){
lotto <- sample(1:49, 6, FALSE)
correct <- c(lotto %in% myLotto)
numberOfCorrect <- sum(correct)
if (numberOfCorrect == 6) {
win <- win + 1
}
week <- week + 1
}
lotto <- sample(1:49, 6, FALSE)
correct <- c(lotto %in% myLotto)
correct
my_Lotto <- c (1, 11, 16, 22, 39, 49)
Lottoziehung <- sample(1:49, 6)
identical(my_Lotto, Lottoziehung)
?identical
identical(c(1,2,3), c(3,2,1))
myLotto <- c(9,23,22,10,13,8)
win <- 0
week <- 0
lotto <- sample(1:49,6, replace = F)
all.equal(c(1,2,3), c(2,3,1))
?all.equal
isTRUE(all.equal(c(1,2,3), c(2,3,1)))
