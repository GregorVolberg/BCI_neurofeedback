previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
epoche
eeg
pnew <- epoche[1:length(boardinfo$eegchannels),] # remove marker channel
epoche <- eeg
pnew <- epoche[1:length(boardinfo$eegchannels),] # remove marker channel
dim(pnew)
zeeg <- (pnew - mean(pnew)) / sd(pnew)
dim(zeeg)
avgz = apply(zeeg, 1, mean)
avgz
avgz = apply(zeeg, 2, mean)
avgz
x11(); plot(avgz)
x11(); plot(avgz, type='l')
matpolot(epoch, type='l')
x11();matplot(epoch, type='l')
x11();matplot(pnew, type='l')
matplot(t(pnew), type='l')
pnorm(abs(avgz))
1-pnorm(abs(avgz))
distAndProb[[2]]
p <- rep(max(pnorm(abs(avgz))), 8)
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.95
numWaitPolls  <- 20 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, threshold)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.95
numWaitPolls  <- 20 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, threshold)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.95
numWaitPolls  <- 20 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, artfct_threshold)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.95
numWaitPolls  <- 20 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.95
numWaitPolls  <- 20 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
distAndProb
round(distAndProb[[2]]$p_artifact, 3)
distAndProb[[2]]$p_artifact
distAndProb[[2]]$p_artifact
distAndProb[[2]]
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.95
numWaitPolls  <- 20 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.975
numWaitPolls  <- 10 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
evgz
avgz
pnorm(abs(avgz))
max(pnorm(abs(avgz)))
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.975
numWaitPolls  <- 10 # take first numWaitPolls for distribution
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls, artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
zeeg
dim(zeeg)
source('./helperFunctions.r')
dev.off()
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.975
numWaitPolls  <- 10 # take first numWaitPolls for distribution
relevantChannels = c(1:4)
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls,
artfct_thresh, relevantChannels)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
### polling
previousSample <- myboard$get_board_data_count()
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.999
numWaitPolls  <- 0 # take first numWaitPolls for distribution
relevantChannels = c(1:4)
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact3(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls,
artfct_thresh, relevantChannels)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
library(tidyverse)
library(brainflow)
library(DescTools)
library(infotheo)
library(signal)
source('./helperFunctions.r')
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo(1) # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 30 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.999 # for fprob 0.7
numWaitPolls  <- 0 # take first numWaitPolls for distribution, for fprob 20
relevantChannels = c(1:4) # only for ft
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#distAndProb <- f_prob_artifact(eeg, distAndProb[[1]], artfct_thresh,                                    polls, numWaitPolls)
distAndProb <- prob_artifact_ft(eeg, boardinfo, polls,
artfct_thresh, relevantChannels)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls,
isArtifact = distAndProb[[2]]$t_artifact, waitpolls = numWaitPolls)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
library(tidyverse)
library(brainflow)
#library(DescTools)
#library(infotheo)
library(gsignal)
library(dbcsp) # for common spatial filters, https://journal.r-project.org/articles/RJ-2022-044/
source('./simplePlot.r')
source('./filterFuncs.r')
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
# TODO
# - select channels at start, only 1:8 und marker
# -
boardinfo <- setBoardInfo(1) # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10
dummyConditions <- sample(c(rep(1,5), rep(2,5)))
X1 <- list(); X2 <- list()
cspdata <- list(X1, X2)
while(polls < npolls){
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
polls <- polls + 1
poll  <- myboard$get_board_data(as.integer(boardinfo$pollnum))
eeg   <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eegm  <- demean(eeg)
eegf  <- lpfilt(eegm, boardinfo, 40)
cspdata[[dummyConditions[polls]]] <- c(cspdata[[dummyConditions[polls]]], list(eegf[1:8,]))
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
eegm
eegb  <- bpfilt(eegm, boardinfo, 8, 12)
eegh  <- bphilbert(eegm, boardinfo, 8, 12)
chan=6
plot(eegm[chan,], type='l')
lines(eegf[chan,], type='l', col='red')
lines(eegb[chan,], type='l', col='blue')
lines(eegb[chan,], type='l', col='blue')
lines(eegh[chan,], type='l', col='green')
library(dbcsp)
mydbcsp <- new('dbcsp', X1=cspdata[[1]], X2=cspdata[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp)
x1 <- AR.data$come
x2 <- AR.data$five
mydbcsp <- new('dbcsp', X1=x1, X2=x2, q=15, labels=c("C1", "C2"))
summary(mydbcsp)
selectQ(mydbcsp)
myd <- train(mydbcsp, selected_q = 2)
xt = x2[1:5]
predict(myd, X_test=xt)
