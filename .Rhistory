size  = 20)
screen <- ggplot(data.frame(xpos, ypos), aes(x, y)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
screen + geom_point(color = c('yellow', 'white', 'white', 'white', 'white'))
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
xpos  <- c(0, 1, 2, 3, 4)
ypos  <- rep(0, length(xpos))
presd <- c(3, 3, 1, 1) # presentation duration per row, in seconds
pchar <- 16 # plotting character, filled circle (19)
colrs <-   rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'))
# plot layout
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
screen + geom_point(color = colrows[j,],
fill  = colrows[j,],
size  = 20)
screen + geom_point(#color = colrows[j,],
fill  = colrows[j,],
size  = 20)
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=1
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=2
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=3
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
j=1
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
x11()
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
Sys.sleep(presd[j])
}
for (j in 1:nrow(colrows)){
screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20)
#Sys.sleep(presd[j])
}
x11()
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20))
#Sys.sleep(presd[j])
}
x11()
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
#fill  = colrows[j,],
size  = 20))
Sys.sleep(presd[j])
}
?x11
x11(width=300, height = 100)
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
size  = 10))
Sys.sleep(presd[j])
}
rep(1,5)
library(ggplot2)
# stimuli and timing
xpos  <- c(0, 1, 2, 3, 4)
ypos  <- rep(0, length(xpos))
presd <- c(2, 2, rep(1, 5)) # presentation duration per row, in seconds
pchar <- 16 # plotting character, filled circle (19)
colrs <-   rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'),
c('white',  'white', 'red',   'white', 'white'),
c('white',  'white', 'white', 'red',   'white'),
c('white',  'white', 'white', 'white', 'red'))
# plot layout
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
x11(width=200, height = 100)
for (j in 1:nrow(colrows)){
print(screen + geom_point(color = colrows[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
x11(width=200, height = 100)
for (j in 1:nrow(colrs)){
print(screen + geom_point(color = colrows[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
colrs <-   rbind(c('yellow', 'white', 'white', 'white', 'white'),
c('green',  'white', 'white', 'white', 'white'),
c('red',    'white', 'white', 'white', 'white'),
c('white',  'red',   'white', 'white', 'white'),
c('white',  'white', 'red',   'white', 'white'),
c('white',  'white', 'white', 'red',   'white'),
c('white',  'white', 'white', 'white', 'red'))
# plot layout
screen <- ggplot(data.frame(xpos, ypos), aes(xpos, ypos)) +
scale_x_continuous(limits = c(-5,5)) +
scale_y_continuous(limits = c(-5,5)) +
theme_void()
# cycle through colors and positions
x11(width=200, height = 100)
for (j in 1:nrow(colrs)){
print(screen + geom_point(color = colrows[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
x11(width=200, height = 100)
for (j in 1:nrow(colrs)){
print(screen + geom_point(color = colrs[j,],
size  = 15))
Sys.sleep(presd[j])
} # in a for-loop, you need to explicitly print() a ggplot object
ls()
45*15
4.5*5*125
library(grid)
library(gridExtra)
library(tidyverse)
# Pfeil definieren
pfeil <- function(direction) {
grid.newpage()
if (direction == "right") {
grid.lines(x = c(0.35, 0.55), y = c(0.5, 0.5), arrow = arrow(type = "closed", ends = "last"))
} else {
grid.lines(x = c(0.55, 0.35), y = c(0.5, 0.5), arrow = arrow(type = "closed", ends = "last"))
}
}
# Grüner Punkt als Signal für Handlung
punkt <- function() {
grid.newpage()
grid.circle(x = 0.5, y = 0.5, r = 0.1, gp = gpar(fill = "green"))
}
# Pause definieren
pause <- function() {
grid.newpage()
}
# Ende definieren
ende <- function() {
grid.newpage()
grid.text("ENDE", x = 0.5, y = 0.5, gp = gpar(fontsize = 20, col = "blue"))
}
# Ablauf eines Trials
trial <- function() {
# Pause (7 Sekunden, mit 2 Sekunden jitter)
pause_duration <- jitter(7, 1, 2)
pause()
Sys.sleep(pause_duration)
# zufällige Pfeilrichtung
arrow_direction <- sample(c("left", "right"), 1)
# Pfeil anzeigen (5 Sekunden)
pfeil(arrow_direction)
Sys.sleep(5)
# Punkt anzeigen (5 Sekunden)
punkt()
Sys.sleep(5)
}
# Trials für eine Session wiederholen lassen
session <- function(times) {
for (i in 1:times) {
trial()
}
ende()
}
# session starten
session(2)
session(2)
pause()
x11()
session(2)
x11?
?x11
x11(width=400, height=200)
x11(width=200, height=80)
x11(width=100, height=80)
x11(width=50, height=80)
x11(width=800, height=40)
x11(width=80, height=40)
x11(width=60, height=40)
x11(width=40, height=20)
x11(width=8, height=6)
x11(width=8, height=6) #new
session(2)
print(x11(width=8, height=6)) #new
session(2)
dev.set(x11())
pltwindow <-x11(width=8, height=6) #new
dev.set(pltwindow)
pltwindow
pltwindow <-x11(width=8, height=6) #new
dev.set(pltwindow)
dev.new()
session(2)
dev.new()
session(2)
?dev.new()
windows()
session(2)
direction <- sample(c(1,2), 1)
c("left", "right")[direction]
4.5 * 5 * 125
myLotto <- c(41, 35, 16, 39,  2, 47)
win  <- 0
week <- 0
while (win < 1){
lotto <- sample(1:49, 6, FALSE)
correct <- c(lotto %in% myLotto)
numberOfCorrect <- sum(correct)
if (numberOfCorrect == 6) {
win <- win + 1
}
week <- week + 1
}
lotto <- sample(1:49, 6, FALSE)
correct <- c(lotto %in% myLotto)
correct
my_Lotto <- c (1, 11, 16, 22, 39, 49)
Lottoziehung <- sample(1:49, 6)
identical(my_Lotto, Lottoziehung)
?identical
identical(c(1,2,3), c(3,2,1))
myLotto <- c(9,23,22,10,13,8)
win <- 0
week <- 0
lotto <- sample(1:49,6, replace = F)
all.equal(c(1,2,3), c(2,3,1))
?all.equal
isTRUE(all.equal(c(1,2,3), c(2,3,1)))
?matplot()
ts()
require(grDevices)
matplot((-4:5)^2, main = "Quadratic") # almost identical to plot(*)
sines <- outer(1:20, 1:4, function(x, y) sin(x / 20 * pi * y))
matplot(sines, pch = 1:4, type = "o", col = rainbow(ncol(sines)))
sines
library(brainflow)
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard <- brainflow_python$BoardShim(Id, params)
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
Sys.sleep(2)
poll <- myboard$get_current_board_data(as.integer(250))
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
dim(poll)
channelnames <- c('F1','F3','C3','C4','O1','O2','TP9','TP10')
data.frame(poll[2:9, 24], names = channelnames)
data.frame(t(poll[2:9, 24]), names = channelnames)
?data.frame
params
params$other_info
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
params$channames <- c('F1','F3','C3','C4','O1','O2','TP9','TP10')
myboard <- brainflow_python$BoardShim(Id, params)
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
Sys.sleep(2)
poll <- myboard$get_current_board_data(as.integer(250))
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
params$channames
make_ts <- function(eeg,params){
eeg <- data.frame(t(poll[2:9, 24]))
names(eeg) <- params$channames
}
makeTS(poll)
makeTS <- function(eeg,params){
eeg <- data.frame(t(poll[2:9, 24]))
names(eeg) <- params$channames
}
makeTS(poll)
makeTS(poll, params)
eeg <- makeTS(poll, params)
eeg
makeTS <- function(poll, params){
eeg <- data.frame(t(poll[2:9, 24]))
names(eeg) <- params$channames
}
eeg <- makeTS(poll, params)
éeg
eeg
eeg <- data.frame(t(poll[2:9, 24]))
eeg
poll
dim(poll)
makeTS <- function(poll, params){
eeg <- data.frame(t(poll[c(2:9, 24),]))
names(eeg) <- params$channames
}
eeg <- makeTS(poll, params)
eeg
eeg <- data.frame(t(poll[c(2:9, 24),]))
eeg
head(eeg)
?colnames
makeTS <- function(poll, params){
eeg <- data.frame(t(poll[c(2:9, 24),]))
colnames(eeg) <- params$channames
}
eeg <- makeTS(poll, params)
eeg
eeg <- data.frame(t(poll[c(2:9, 24),]))
params$channames <- c('F1','F3','C3','C4','O1','O2','TP9','TP10', 'Marker')
makeTS <- function(poll, params){
eeg <- data.frame(t(poll[c(2:9, 24),]))
colnames(eeg) <- params$channames
}
eeg <- makeTS(poll, params)
eeg
eeg <- data.frame(t(poll[c(2:9, 24),]))
eeg
head(eeg)
params$channames
str(params$channames)
colnames(eeg) <- c('F1','F3','C3','C4','O1','O2','TP9','TP10', 'Marker')
eeg
makeTS <- function(poll, params){
eeg <- data.frame(t(poll[c(2:9, 24),]))
colnames(eeg) <- as.character(params$channames)
}
eeg <- makeTS(poll, params)
eeg
params$channames
print(params$channames)
is.character(params$channames)
pull(params$channames)
params$channames
t(params$channames)
channames <- c('F1','F3','C3','C4','O1','O2','TP9','TP10', 'Marker')
makeTS <- function(poll, channames){
eeg <- data.frame(t(poll[c(2:9, 24),]))
colnames(eeg) <- as.character(params$channames)
}
makeTS <- function(poll, params){
eeg <- data.frame(t(poll[c(2:9, 24),]))
colnames(eeg) <- as.character(params$channames)
return(eeg)
}
eeg <- makeTS(poll, params)
eeg
head(eeg)
ts(eeg)
plot(ts(eeg))
makeTS <- function(poll, params){
eeg <- data.frame(t(poll[c(2:9, 24),]))
colnames(eeg) <- as.character(params$channames)
eeg <- ts(eeg, frequency = 250, start = 0)
return(eeg)
}
eeg <- makeTS(poll, params)
plot(eeg)
makeTS <- function(poll, params, startsample = 0){
eeg <- data.frame(t(poll[c(2:9, 24),]))
colnames(eeg) <- as.character(params$channames)
eeg <- ts(eeg, frequency = 250, start = 0)
return(eeg)
}
eeg <- makeTS(poll, params)
library(tidyverse)
eeg %>% mutate(across(params$channames[1:8]))
eeg <- data.frame(t(poll[c(2:9, 24),]))
eeg %>% mutate(across(params$channames[1:8]))
colnames(eeg) <- as.character(params$channames)
eeg %>% mutate(across(1:8, ))
?mutate
across
?across
eeg %>% mutate(across(1:8, ~ .x - mean(.x, na.rm=T)))
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T)))
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T))) %>%
rename(params$channames)
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T),
names =params$channames ))
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T),
.names =params$channames ))
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T))) %>%
rename_with(., params$channames)
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T))) %>%
setNames(params$channames)
eeg
head(eeg)
makeTS <- function(poll, params, startsample = 0){
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T))) %>%
setNames(params$channames) %>%
ts(., frequency = 250, start = startsample)
#eeg <- ts(eeg, frequency = 250, start = 0)
return(eeg)
}
eeg <- makeTS(poll, params)
plot(eeg)
makeTS <- function(poll, params, startsample = 0){
eeg <- data.frame(t(poll[c(2:9, 24),])) %>%
mutate(across(1:8, ~ .x - mean(.x, na.rm=T))) %>%
setNames(params$channames) %>%
ts(., frequency = 250, start = startsample)
}
eeg <- makeTS(poll, params)
plot(eeg)
?ts
plot(eeg, col='red')
plot(eeg, col=c(rep('red', 8), 'blue'))
ts.plot(eeg, col=c(rep('red', 8), 'blue'))
plot(eeg, cols=c(rep('red', 8), 'blue'))
plot(eeg, colors=c(rep('red', 8), 'blue'))
c(rep('red', 8)
rep('red', 8)
rep('red', 8)
plot(eeg, col=c(rep('red', 8), 'blue'))
plot(eeg, col=c(rep('red', 7), 'blue'))
plot(eeg, col=c(rep('blue', 7), 'blue'))
col=c(rep('blue', 7), 'blue')
col
?plot
autoplot(eeg)
library(zoo)
install.packages("zoo")
library(zoo)
autoplot(eeg)
install.packages("scales")
library(zoo)
library(scales)
autoplot(eeg)
class(eeg)
autoplot(eeg)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(eeg)
autoplot(eeg) + theme_void()
autoplot(eeg) + theme_bw()
eeg
?autoplot.ts
autoplot(eeg,
columns = c('F1', 'F2')) + theme_bw()
autoplot(eeg,
columns = c('F1', 'F3')) + theme_bw()
autoplot(eeg,
columns = params$channames) + theme_bw()
autoplot(eeg,
columns = params$channames,
facets = FALSE) + theme_bw()
autoplot(eeg,
columns = params$channames,
facets = TRUE) +
theme_bw()
eeg <- makeTS(poll, params)
plot(eeg, col='blue')
