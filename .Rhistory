artfct <- data.frame(p_artifact, t_artifact)
return(artfct)
}
dist_EKS
dist_EKS <- NULL
threshold = 0.8
epoche = eeg
epoche
dim(epoche)
f_prob_artifact(eeg, dist_EKS, 0.8)
artfct <- f_prob_artifact(eeg, dist_EKS, artfct_thresh)
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10 #
begsample <- NULL
endsample <- NULL
dist_EKS  <- NULL
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#plotEEG(eeg, boardinfo, polls)
artfct <- f_prob_artifact(eeg, dist_EKS, artfct_thresh)
plotEEG3(eeg, boardinfo, polls, isArtifact = artfct$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 20 #
begsample <- NULL
endsample <- NULL
dist_EKS  <- NULL
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#plotEEG(eeg, boardinfo, polls)
artfct <- f_prob_artifact(eeg, dist_EKS, artfct_thresh)
print(artfct$p_artifact)
plotEEG3(eeg, boardinfo, polls, isArtifact = artfct$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
list(dist_EKS, artfct)
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 20 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#plotEEG(eeg, boardinfo, polls)
distAndProb <- f_prob_artifact(eeg, distAndProb[[1]], artfct_thresh)
print(distAndProb[[2]]$p_artifact)
plotEEG3(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
distAndProb[[1]]
dist_EKS=distAndProb[[1]]
matrix(dist_EKS[,1], 8)
apply(matrix(dist_EKS[,1], 8), 1, FUN = max)
EKS
EKS[,1] / apply(matrix(dist_EKS[,1], 8), 1, FUN = max)
EKS[,2] / apply(matrix(dist_EKS[,2], 8), 1, FUN = max)
EKS[,3] / apply(matrix(dist_EKS[,3], 8), 1, FUN = max)
EKS[EKS[,2]<0,2]
EKS[EKS[,2]<0,2] = 0
print(round(distAndProb[[2]]$p_artifact, 2)
)
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 20 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#plotEEG(eeg, boardinfo, polls)
distAndProb <- f_prob_artifact(eeg, distAndProb[[1]], artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG3(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 20 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#plotEEG(eeg, boardinfo, polls)
distAndProb <- f_prob_artifact(eeg, distAndProb[[1]], artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG3(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 50 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
#plotEEG(eeg, boardinfo, polls)
distAndProb <- f_prob_artifact(eeg, distAndProb[[1]], artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG3(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
apply(matrix(dist_EKS[,1], 8), 1, FUN = max)
apply(matrix(dist_EKS[,1], 8), 1, FUN = max)
dist_EKS
distAndProb
distAndProb[[1]]
dist_EKS=distAndProb[[1]]
matrix(dist_EKS[,1], 8)
matrix(dist_EKS[,1], 8) < EKS[,1]
sum(matrix(dist_EKS[,1], 8) < EKS[,1])
apply(matrix(dist_EKS[,1], 8) < EKS[,1], 1, sum)
apply(matrix(dist_EKS[,1], 8) >= EKS[,1], 1, sum)
sum(matrix(dist_EKS[,1], 8)[1,] >= EKS)
matrix(dist_EKS[,1], 8)[1,]
matrix(dist_EKS[,1], 8)[1,] >= EKS[,1]
matrix(dist_EKS[,1], 8)[1,] >= EKS[1,1]
sum(matrix(dist_EKS[,1], 8)[1,] >= EKS[1,1])
apply(matrix(dist_EKS[,1], 8) < EKS[,1], 1, sum) / polls
apply(matrix(dist_EKS[,1], 8) >= EKS[,1], 1, sum) / polls
apply(matrix(dist_EKS[,1], 8) < EKS[,1], 1, sum) / polls
1-(apply(matrix(dist_EKS[,1], 8) < EKS[,1], 1, sum) / polls)
?percent_rank()
percent_rank(dist_EKS)
matrix(dist_EKS[,1], 8)
apply(matrix(dist_EKS[,1], 8), 1, percent_rank)
dim(apply(matrix(dist_EKS[,1], 8), 1, percent_rank))
apply(matrix(dist_EKS[,1], 8), 1, percent_rank)[end,]
apply(matrix(dist_EKS[,1], 8), 1, percent_rank)
1-(apply(matrix(dist_EKS[,1], 8) < EKS[,1], 1, sum) / polls)
dim(dist_EKS)
dim(dist_EKS)[1]/8
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 50 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
distAndProb <- f_prob_artifact2(eeg, distAndProb[[1]], artfct_thresh)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
source('./helperFunctions.r')
source('./helperFunctions.r')
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 50 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
distAndProb <- f_prob_artifact2(eeg, distAndProb[[1]], artfct_thresh, polls)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
source('./helperFunctions.r')
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 50 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
distAndProb <- f_prob_artifact2(eeg, distAndProb[[1]], artfct_thresh, polls)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
eeg
e=distity(eeg)
e=denstity(eeg)
e=density(eeg)
plot(e$x, e$y)
e=density(eeg[1,])
plot(e$x, e$y)
boardinfo$samplerate * baselineEEG
previousSample <- myboard$get_board_data_count()
previousSample <- myboard$get_board_data_count()
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 50 #
baselineEEG <- 30 # seconds for artifact distribution
begsample <- NULL
endsample <- NULL
mergedEEG <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while (myboard$get_board_data_count() < boardinfo$samplerate * baselineEEG) {
Sys.sleep(0.02) # wait until buffer is filled
}
bslEEG <- myboard$get_board_data()
dim(bslEEG)
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
dim(eeg)
eeg  <- demean(bslEEG)
eeg  <- demean(bslEEG)
eeg <- lpfilt(eeg, boardinfo)
dim(eeg)
calc_EKS(eeg)
eeg
poll
poll(1)
poll[1,]
poll[,1]
poll[2,]
dim(eeg)
plot(eeg[1,1:1000])
plot(eeg[1,2:1000])
plot(eeg[2,1:1000])
plot(eeg[2,1:1000], type='l')
plot(eeg[2,1:1200], type='l')
plot(eeg[2,1:1600], type='l')
plot(eeg[2,2:1600], type='l')
plot(eeg[3,1:1600], type='l')
plot(eeg[4,1:1600], type='l')
plot(eeg[5,1:1600], type='l')
eeg
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
### polling
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
polls <- 0
npolls <- 10 #
begsample <- NULL
endsample <- NULL
distAndProb <- list(dist_EKS  <- NULL,
artfct    <- NULL)
artfct_thresh <- 0.8
while(polls < npolls){
polls <- polls + 1
begsample[polls]  <- previousSample + 1
endsample[polls]  <- previousSample + boardinfo$pollnum
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
##### routines within the loop
eeg  <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
eeg  <- demean(eeg)
eeg <- lpfilt(eeg, boardinfo)
distAndProb <- f_prob_artifact2(eeg, distAndProb[[1]], artfct_thresh, polls)
print(round(distAndProb[[2]]$p_artifact, 3))
plotEEG(eeg, boardinfo, polls, isArtifact = distAndProb[[2]]$t_artifact)
#####
previousSample <- endsample[polls]
}
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
dev.off()
eeg
dim(eeg)
stdev
apply(pnew, 1, function(x) (x-mean(x) / sd(x)))
dim(pnew)
zeeg <- apply(pnew, 1, function(x) (x-mean(x) / sd(x)))
dim(zeeg)
pnew - mean(pnew)
dim(pnew - mean(pnew))
(pnew - mean(pnew)) / sd(pnew)
dim((pnew - mean(pnew)) / sd(pnew))
avgz = mean(zeeg, 1)
avgz
dim(zeeg)
zeeg <- (pnew - mean(pnew)) / sd(pnew)
dim(zeeg)
avgz = mean(zeeg, 1)
avgz
avgz = apply(zeeg, 1, mean)
avgz
avgz = apply(zeeg, 2, mean)
avgz
plot(evgz)
plot(avgz)
library(brainflow)
Id      <- brainflow_python$BoardIds$SYNTETIC_BOARD
Id      <- brainflow_python$BoardIds$SYNTHETIC_BOARD
params  <- brainflow_python$BrainFlowInputParams()
myboard             <- brainflow_python$BoardShim(Id, params)
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
Sys.sleep(3) # wait until buffer is filled
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
Id      <- brainflow_python$BoardIds$SYNTHETIC_BOARD
params  <- brainflow_python$BrainFlowInputParams()
myboard             <- brainflow_python$BoardShim(Id, params)
myboard.add_streamer("plotjuggler_udp://127.0.0.1:9870")
board.add_streamer("plotjuggler_udp://127.0.0.1:9870")
library(brainflow)
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard.add_streamer("plotjuggler_udp://127.0.0.1:9870")
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$add_streamer("plotjuggler_udp://127.0.0.1:9870")
myboard$start_stream()    # start stream
Sys.sleep(3) # wait until buffer is filled
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
library(brainflow)
Id      <- brainflow_python$BoardIds$SYNTHETIC_BOARD
params  <- brainflow_python$BrainFlowInputParams()
myboard             <- brainflow_python$BoardShim(Id, params)
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$add_streamer("plotjuggler_udp://127.0.0.1:9870")
myboard$start_stream()    # start stream
Sys.sleep(3) # wait until buffer is filled
myboard$stop_stream()     # stop stream
myboard$release_session() # end session
