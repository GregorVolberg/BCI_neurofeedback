filter(., val != 0)
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:nrow(.))
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:nrow(.)) %>%
filter(val > 0)
# first: training on previous data
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:nrow(.))
markers
markers$val > 0
unique(markers$val)
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n())
markers
# first: training on previous data
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
filter(val > 0)
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
tidyverse::filter(val > 0)
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)
markers
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
group_by(val)
markers
markers[[1]]
markers[[2]]
markers[[3]]
markers[[1]][1]
markers[[1]][2]
markers[[2]][2]
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
group_by(val) %>%
as_list()
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
group_by(val) %>%
summarize(spoint)
markers
?reframe
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
reframe(by = val)
markers
markers[[1]]
markers[[2]]
?split
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
split(., by = val, keep.by =T)
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
split(by = val, keep.by =T)
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
split(., by = val, keep.by =T)
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
group_by(val) %>%
group_split()
markers
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
group_by(val) %>%
group_split()
eegdat <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(c(2:9))
eegdat <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(c(2:9))
markers[[1]]
markers[[1]]$spoint
length(markers[[1]]$spoint)
for (trial in markers[[con]]$spoint){
print (trial)}
for (trial in markers[[1]]$spoint){
print (trial)}
dim(eegdat)
eegdat <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(c(2:9)) %%>
eegdat <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(c(2:9)) %>%
t()
dim(eegdat)
eegdat
dim(eegdat)
eegdat
size(eegdat)
dim(eegdat)
ll=markers[[1]]$spoint)
ll=markers[[1]]$spoint
ll
a=ll[1]
a
eegdat[, a:(a+250)]
demean(eegdat[, a:(a+250)])
source('./filterFuncs.r')
demean(eegdat[, a:(a+250)])
source('./helperFunctions.r')
demean(eegdat[, a:(a+250)])
a=eegdat[, a:(a+250)]
apply(a, 1, function(x) x - mean(x)))
apply(a, 1, function(x) x - mean(x))
dim(apply(a, 1, function(x) x - mean(x)))
tmp <- eegdat[, sp:(sp+250)]
sp=a
a
sp = 5012
tmp <- eegdat[, sp:(sp+250)]
t(apply(tmp, 1, function(x) x - mean(x)))
tmp  <- eegdat[, sp:(sp+250)]
tmp2 <- t(apply(tmp, 1, function(x) x - mean(x)))
dim(tmp2)
bpfilt <- function(eegin, srate, lf = 8, hf = 12, forder = 6){
coef <- butter(forder, c(lf, hf) / srate, 'pass')
eegout <- t(apply(eegin, 1, function(x) filtfilt(coef, x)))
}
tmp2
bpfilt(tmp2, 250, 8, 30, 6)
l=bpfilt(tmp2, 250, 8, 30, 6)
dim(l)
l
matplot(l)
matplot(t(l)
)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, boardinfo, 8, 12)
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, 250, 8, 12)
eegm
dim(eegm)
eegf  <- bpfilt(eegm, 250, 8, 12, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
bpfilt <- function(eegin, srate, lf = 8, hf = 12, forder = 6){
coef <- butter(forder, c(lf, hf) / srate, 'pass')
eegout <- t(apply(eegin, 1, function(x) filtfilt(coef, x)))
}
eegf  <- bpfilt(eegm, 250, 8, 30, 6)
coef <- butter(forder, c(lf, hf) / srate, 'pass')
bpfilt <- function(eegin, srate, lf, hf, forder){
coef <- butter(forder, c(lf, hf) / srate, 'pass')
eegout <- t(apply(eegin, 1, function(x) filtfilt(coef, x)))
}
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, 250, 8, 30, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
matplot(t(eegh))
x1 <- AR.data$come
x1
str(x1)
X1 = list(); X2 = list()
cspdata = c(X1, X2)
# create list of real motor conditions
for (con in 1:2){
lstnum = 0
for (sp in markers[[con]]$spoint){
lstnum = lstnum + 1
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, 250, 8, 30, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
cspdata[[con]][lstnum] = list(eegf)
}
}
markers[[1]]
markers[[2]]
markers[[3]]
sp in markers[[con]]$spoint)
for (con in 1:2){
lstnum = 0
for (sp in markers[[con]]$spoint){
lstnum = lstnum + 1
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, 250, 8, 30, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
cspdata[[con]][lstnum] = list(eegf)
}
}
cspdata[[1]]
cspdata
X1 = list(); X2 = list()
cspdata = list(X1, X2)
# create list of real motor conditions
for (con in 1:2){
lstnum = 0
for (sp in markers[[con]]$spoint){
lstnum = lstnum + 1
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, 250, 8, 30, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
cspdata[[con]][lstnum] = list(eegf)
}
}
cspdata
X1 = list(); X2 = list()
cspdataI = list(X1, X2)
for (con in 1:2){
lstnum = 0
for (sp in markers[[con]]$spoint){
lstnum = lstnum + 1
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, 250, 8, 30, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
cspdataI[[con]][lstnum] = list(eegf)
}
}
library(dbcsp)
mydbcsp <- new('dbcsp', X1=cspdata[[1]], X2=cspdata[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp)
summary(mydbcsp)
myd <- train(mydbcsp, selected_q = 2)
selectQ(mydbcsp)
summary(mydbcsp)
?selectQ
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
myd <- train(mydbcsp, selected_q = 3)
lf = 8
hf = 30
X1 = list(); X2 = list()
cspdataM = list(X1, X2)
for (con in 1:2){
lstnum = 0
for (sp in markers[[con]]$spoint){
lstnum = lstnum + 1
eegm <- t(apply(eegdat[, sp:(sp+250)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, 250, lf, hf, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
cspdataM[[con]][lstnum] = list(eegf)
}
}
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
myd <- train(mydbcsp, selected_q = 4)
?predict
predict(myd, X_test=xt)
predict(myd, X_test=cspdataI[[1]])
predict(myd, X_test=cspdataI[[1]])$left > 0.5
predict(myd, X_test=cspdataI[[1]])$left
predict(myd, X_test=cspdataI[[1]])
predict(myd, X_test=cspdataI[[1]])$posterior$left > 0.5
predict(myd, X_test=cspdataI[[1]])$posterior
predict(myd, X_test=cspdataI[[1]])$posterior$left
predict(myd, X_test=cspdataI[[1]])$posterior
pull(predict(myd, X_test=cspdataI[[1]])$posterior, left)
predict(myd, X_test=cspdataI[[1]])$posterior['left'])
predict(myd, X_test=cspdataI[[1]])$posterior['left']
predict(myd, X_test=cspdataI[[1]])$posterior[,'left']
predict(myd, X_test=cspdataI[[1]])$posterior[,'left']>5
predict(myd, X_test=cspdataI[[1]])$posterior[,'left']>0.5
ergleft <- predict(myd, X_test=cspdataI[[1]])$posterior[,'left']
ergright <- predict(myd, X_test=cspdataI[[2]])$posterior[,'right']
ergleft > 0.5
ergright > 0.5
(c(ergleft, ergright))
sum(c(ergleft, ergright)) / length(c(ergleft, ergright))
source('./filterFuncs.r')
source('./helperFunctions.r')
# first: training on previous data
markers <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(val = 24) %>%
mutate(spoint = 1:n()) %>%
dplyr::filter(val > 0)  %>%
group_by(val) %>%
group_split()
eegdat <- read_delim('test_run_motor.csv',
col_names = FALSE) %>%
select(c(2:9)) %>%
t()
bpfilt <- function(eegin, srate, lf, hf, forder){
coef <- butter(forder, c(lf, hf) / srate, 'pass')
eegout <- t(apply(eegin, 1, function(x) filtfilt(coef, x)))
}
# create list of real motor conditions
# find out:
# - best lf and hf
# - raw data (eegm), filtered data (eegf) or hilbert amplitude (eegh)
lf = 8
hf = 30
pollnum = 256
srate = 250
X1 = list(); X2 = list()
cspdataM = list(X1, X2)
for (con in 1:2){
lstnum = 0
for (sp in markers[[con]]$spoint){
lstnum = lstnum + 1
eegm <- t(apply(eegdat[, sp:(sp+pollnum-1)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, srate, lf, hf, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
cspdataM[[con]][lstnum] = list(eegf)
}
}
X1 = list(); X2 = list()
cspdataI = list(X1, X2)
for (con in 1:2){
lstnum = 0
for (sp in markers[[con]]$spoint){
lstnum = lstnum + 1
eegm <- t(apply(eegdat[, sp:(sp+pollnum-1)], 1, function(x) x - mean(x)))
eegf  <- bpfilt(eegm, srate, lf, hf, 6)
eegh  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
cspdataI[[con]][lstnum] = list(eegf)
}
}
# training with csp
library(dbcsp)
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
selectQ
?selectQ
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8), seed = 1)
myd <- train(mydbcsp, selected_q = 1)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8), seed = 1)
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
myd <- train(mydbcsp, selected_q = 2)
myd <- train(mydbcsp, selected_q = 2)
myd <- train(mydbcsp, selected_q = 4)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
myd <- train(mydbcsp, selected_q = 3)
myd <- train(mydbcsp, selected_q = 3)
?train
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8), fold = 20)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
myd <- train(mydbcsp, selected_q = 3)
myd <- train(mydbcsp, selected_q = 3, fold=10)
myd <- train(mydbcsp, selected_q = 3, fold=20)
myd <- train(mydbcsp, selected_q = 3, fold=20, train_size = 0.7)
myd <- train(mydbcsp, selected_q = 3, fold=20, train_size = 0.6)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8), train_size = 0.7)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
summary(mydbcsp)
myd <- train(mydbcsp, selected_q = 8, fold=20, train_size = 0.6)
myd <- train(mydbcsp, selected_q = 3)
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
myd <- train(mydbcsp, selected_q = 3)
myd <- train(mydbcsp, selected_q = 3)
myd <- train(mydbcsp, selected_q = 3)
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataI[[1]], X2=cspdataI[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
mydbcsp <- new('dbcsp', X1=cspdataM[[1]], X2=cspdataM[[2]], q = 8, type='dtw',
labels = c('left', 'right'))
summary(mydbcsp)
selectQ(mydbcsp, Q = c(1, 2, 3, 4, 6, 8))
myd <- train(mydbcsp, selected_q = 3)
ergleft  <- predict(myd, X_test=cspdataI[[1]])$posterior[,'left']
ergright <- predict(myd, X_test=cspdataI[[2]])$posterior[,'right']
ergleft > 0.5
ergright > 0.5
sum(c(ergleft, ergright)) / length(c(ergleft, ergright))
Id      <- brainflow_python$BoardIds$PLAYBACK_FILE_BOARD
params  <- brainflow_python$BrainFlowInputParams()
params$file         <- "scene_aff_visual_2024-05-07-103106.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo(1) # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
params$file         <- "test_run_motor.csv"
params$master_board <- brainflow_python$BoardIds$CYTON_BOARD
myboard             <- brainflow_python$BoardShim(Id, params)
boardinfo <- setBoardInfo(1) # see helper functions
myboard$release_all_sessions()
myboard$prepare_session() # start session
myboard$start_stream()    # start stream
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
eeg   <- poll[c(boardinfo$eegchannels, boardinfo$markerchannel),]
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
previousSample <- myboard$get_board_data_count()
invisible(myboard$get_board_data()) # empty buffer
while (myboard$get_board_data_count() < boardinfo$pollnum) {
Sys.sleep(0.02) # wait until buffer is filled
}
poll <- myboard$get_board_data(as.integer(boardinfo$pollnum))
dim(poll)
eeg   <- poll[boardinfo$eegchannels,]
dim(eeg)
eegm1 <- t(apply(eeg, 1, function(x) x - mean(x)))
eegm1
dim(eegm1)
eegf1  <- bpfilt(eegm, srate, lf, hf, 6)
dim(eegf1)
eegh1  <- t(apply(eegf, 1, function(x) abs(hilbert(x))))
eegh1
eegf1
predict(myd, X_test=list(eegf1))
predict(myd, X_test=list(eegf1))$posterior[,'left']
